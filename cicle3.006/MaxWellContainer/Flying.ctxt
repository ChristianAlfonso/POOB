#BlueJ class context
comment0.target=Flying
comment0.text=\r\n\ Clase\ que\ representa\ una\ part\u00EDcula\ que\ puede\ volar\ por\ encima\ de\ los\ agujeros.\r\n\ Hereda\ de\ la\ clase\ Particle\ e\ ignora\ las\ colisiones\ con\ los\ agujeros.\r\n
comment1.params=x\ y\ color\ isRed\ diameter\ speedX\ speedY\ originalX
comment1.target=Flying(int,\ int,\ java.lang.String,\ boolean,\ int,\ int,\ int,\ int)
comment1.text=\r\n\ Constructor\ para\ crear\ una\ part\u00EDcula\ voladora.\r\n\r\n\ @param\ x\ \ \ \ \ \ \ \ \ \ \ La\ posici\u00F3n\ inicial\ en\ el\ eje\ X\ (coordenada\ interna).\r\n\ @param\ y\ \ \ \ \ \ \ \ \ \ \ La\ posici\u00F3n\ inicial\ en\ el\ eje\ Y.\r\n\ @param\ color\ \ \ \ \ \ \ El\ color\ de\ la\ part\u00EDcula.\r\n\ @param\ isRed\ \ \ \ \ \ \ Indica\ si\ la\ part\u00EDcula\ es\ de\ color\ rojo.\r\n\ @param\ diameter\ \ \ \ El\ di\u00E1metro\ de\ la\ part\u00EDcula.\r\n\ @param\ speedX\ \ \ \ \ \ La\ velocidad\ en\ el\ eje\ X.\r\n\ @param\ speedY\ \ \ \ \ \ La\ velocidad\ en\ el\ eje\ Y.\r\n\ @param\ originalX\ \ \ La\ coordenada\ X\ original\ (puede\ ser\ negativa).\r\n
comment10.params=
comment10.target=int\ getOriginalYPosition()
comment10.text=\r\n\ Obtiene\ la\ posici\u00F3n\ Y\ original.\r\n\ @return\ La\ coordenada\ Y\ original.\r\n
comment2.params=containerWidth\ containerHeight\ lineX\ holes
comment2.target=void\ move(int,\ int,\ int,\ java.util.List)
comment2.text=\r\n\ Mueve\ la\ part\u00EDcula,\ verificando\ si\ necesita\ volar\ sobre\ agujeros.\r\n\r\n\ @param\ containerWidth\ \ El\ ancho\ del\ contenedor.\r\n\ @param\ containerHeight\ La\ altura\ del\ contenedor.\r\n\ @param\ lineX\ \ \ \ \ \ \ \ \ \ \ La\ posici\u00F3n\ en\ X\ de\ la\ l\u00EDnea\ divisoria.\r\n\ @param\ holes\ \ \ \ \ \ \ \ \ \ \ Lista\ de\ agujeros\ en\ el\ contenedor.\r\n
comment3.params=holes
comment3.target=void\ checkHoleCollision(java.util.List)
comment3.text=\r\n\ Verifica\ si\ la\ part\u00EDcula\ est\u00E1\ sobre\ un\ agujero\ y\ activa\ el\ modo\ vuelo\ si\ es\ necesario.\r\n\r\n\ @param\ holes\ Lista\ de\ agujeros\ en\ el\ contenedor.\r\n
comment4.params=hole
comment4.target=boolean\ isOverHole(Hole)
comment4.text=\r\n\ Verifica\ si\ la\ part\u00EDcula\ est\u00E1\ sobre\ un\ agujero\ espec\u00EDfico.\r\n\r\n\ @param\ hole\ El\ agujero\ a\ verificar.\r\n\ @return\ true\ si\ est\u00E1\ sobre\ el\ agujero,\ false\ en\ caso\ contrario.\r\n
comment5.params=holes
comment5.target=boolean\ isOverHole(java.util.List)
comment5.text=\r\n\ Verifica\ si\ la\ part\u00EDcula\ est\u00E1\ sobre\ cualquier\ agujero\ de\ la\ lista.\r\n\r\n\ @param\ holes\ Lista\ de\ agujeros.\r\n\ @return\ true\ si\ est\u00E1\ sobre\ alg\u00FAn\ agujero,\ false\ en\ caso\ contrario.\r\n
comment6.params=
comment6.target=void\ takeOff()
comment6.text=\r\n\ Activa\ el\ modo\ vuelo\ de\ la\ part\u00EDcula.\r\n
comment7.params=
comment7.target=void\ land()
comment7.text=\r\n\ Desactiva\ el\ modo\ vuelo\ de\ la\ part\u00EDcula.\r\n
comment8.params=
comment8.target=boolean\ isFlying()
comment8.text=\r\n\ Obtiene\ si\ la\ part\u00EDcula\ est\u00E1\ volando.\r\n\r\n\ @return\ true\ si\ est\u00E1\ volando,\ false\ en\ caso\ contrario.\r\n
comment9.params=y
comment9.target=void\ setOriginalYPosition(int)
comment9.text=\r\n\ Establece\ la\ posici\u00F3n\ Y\ original.\r\n\ @param\ y\ La\ coordenada\ Y\ original.\r\n
numComments=11
